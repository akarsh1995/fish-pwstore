name: CI

on:
  push:
    branches: [ main, master ]
    tags-ignore:
      - v.*
  pull_request:
    branches: [ main, master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Install Fish Shell
      uses: fish-actions/install-fish@v1

    - name: Install Dependencies
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install -y gnupg jq pass python3
        else
          brew install gnupg jq pass
        fi
        gpg --version
        jq --version
        python3 --version || echo "Python 3 not found"
        echo "Pass version:"
        pass --version || echo "Pass not found"

        # Check if realpath/grealpath is available
        if command -v realpath >/dev/null 2>&1; then
          echo "realpath is available"
        else
          echo "realpath is not available"
        fi
        if command -v grealpath >/dev/null 2>&1; then
          echo "grealpath is available"
        else
          echo "grealpath is not available"
        fi

    - name: Set up GPG key for testing
      run: |
        # Create test GPG key for CI environment
        cat > key_config <<EOF
        %echo Generating a basic OpenPGP key for testing
        Key-Type: RSA
        Key-Length: 2048
        Name-Real: CI Test
        Name-Email: ci@example.com
        Expire-Date: 0
        %no-protection
        %commit
        %echo Done
        EOF
        gpg --batch --generate-key key_config
        gpg --list-keys

    - name: Create test password store for import testing
      run: |
        # Create basic password-store structure with test data
        mkdir -p ~/.password-store/test
        mkdir -p ~/.password-store/email
        mkdir -p ~/.password-store/web/{social,banking}

        # Get GPG key ID for CI Test
        gpg_key_id=$(gpg --list-keys --with-colons "CI Test" | grep "^pub" | cut -d: -f5)
        echo "Using GPG key ID: $gpg_key_id for encryption"

        # Create sample password files - use --trust-model always to avoid trust issues
        echo "password123" | gpg --trust-model always --recipient "CI Test" --encrypt -o ~/.password-store/test/example.gpg
        echo "email-password" | gpg --trust-model always --recipient "CI Test" --encrypt -o ~/.password-store/email/gmail.gpg
        echo "twitter-pass" | gpg --trust-model always --recipient "CI Test" --encrypt -o ~/.password-store/web/social/twitter.gpg
        echo "bank-pass" | gpg --trust-model always --recipient "CI Test" --encrypt -o ~/.password-store/web/banking/chase.gpg

        # Test decryption directly to verify encryption worked
        echo "Testing direct decryption of a file:"
        gpg --batch --decrypt ~/.password-store/test/example.gpg || echo "Decryption test failed"

        # Add metadata to some files (unencrypted for test verification)
        echo "email-password" > ~/.password-store/email/gmail.txt
        echo "username: test@gmail.com" >> ~/.password-store/email/gmail.txt
        echo "url: https://gmail.com" >> ~/.password-store/email/gmail.txt

        echo "twitter-pass" > ~/.password-store/web/social/twitter.txt
        echo "username: @testuser" >> ~/.password-store/web/social/twitter.txt
        echo "url: https://twitter.com" >> ~/.password-store/web/social/twitter.txt

        # Verify structure
        find ~/.password-store -type f | sort

    - name: Install Fisher and fish-pwstore
      run: |
        fish -c "curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source && fisher install $GITHUB_WORKSPACE"

    - name: Make test scripts executable
      run: |
        echo "Making all test scripts executable"
        chmod +x $GITHUB_WORKSPACE/tests/*.fish
        ls -la $GITHUB_WORKSPACE/tests/*.fish  # Verify permissions

    - name: Setup password store configuration
      run: |
        # Create directory for pwstore and set correct permissions
        fish -c "mkdir -p ~/.config/fish/secure"

        # Configure pwstore to use the CI Test GPG key
        # Using name directly as recommended
        fish -c "set -Ux pwstore_gpg_recipient 'CI Test'"
        fish -c "set -Ux pwstore_path ~/.config/fish/secure/passwords"

        # Debug the environment
        echo "==== GPG Keys ===="
        gpg --list-keys

        # Export GPG_TTY for better GPG interaction
        export GPG_TTY=$(tty)

        # Initialize the password store directory
        fish -c "pw init"

    - name: Test GPG Environment
      run: |
        # Export GPG_TTY to avoid "Inappropriate ioctl for device" errors with GPG
        export GPG_TTY=$(tty)

        # Run the GPG environment test script
        fish -c "set -x CI true; cd $GITHUB_WORKSPACE && ./tests/test_gpg_env.fish"

    - name: Check path resolution commands
      run: |
        echo "Checking available path resolution commands in CI environment"
        echo "* realpath: $(which realpath 2>/dev/null || echo 'not available')"
        echo "* grealpath: $(which grealpath 2>/dev/null || echo 'not available')"
        echo "* python3: $(which python3 2>/dev/null || echo 'not available')"
        echo "* python: $(which python 2>/dev/null || echo 'not available')"
        echo "* readlink: $(which readlink 2>/dev/null || echo 'not available')"

    - name: Run path resolution tests first
      run: |
        export GPG_TTY=$(tty)
        echo "Testing path resolution methods first to ensure they work in CI environment"
        fish -c "set -x CI true; set -x DEBUG true; cd $GITHUB_WORKSPACE && ./tests/test_path_resolution.fish"
        fish -c "set -x CI true; set -x DEBUG true; cd $GITHUB_WORKSPACE && ./tests/test_ci_path_fallbacks.fish"
        fish -c "set -x CI true; set -x DEBUG true; cd $GITHUB_WORKSPACE && ./tests/test_advanced_path_resolution.fish"

    - name: Run all tests
      run: |
        export GPG_TTY=$(tty)
        fish -c "set -x CI true; cd $GITHUB_WORKSPACE && ./tests/run_tests.fish"

    - name: Test basic pw functionality
      run: |
        # Export GPG_TTY to avoid "Inappropriate ioctl for device" errors with GPG
        export GPG_TTY=$(tty)

        # Print current environment for debugging
        echo "==== PWStore Environment ===="
        fish -c "echo \"PWStore path: \$pwstore_path\""
        fish -c "echo \"PWStore GPG recipient: \$pwstore_gpg_recipient\""

        # Test version commands
        fish -c "set -x CI true; pw version"
        fish -c "set -x CI true; pw --version"
        fish -c "set -x CI true; pw help"

        # Now test password operations using --no-prompt flag
        fish -c "set -x CI true; pw add test_password --no-prompt \"test-password\" --username=user@example.com --url=https://example.com \"Test password from CI\""
        fish -c "set -x CI true; pw ls"
        fish -c "set -x CI true; pw show test_password"

    - name: Test pass import functionality
      run: |
        # Export GPG_TTY to avoid "Inappropriate ioctl for device" errors with GPG
        export GPG_TTY=$(tty)

        # Check GPG agent status without attempting to start a new one
        echo "==== GPG Agent Status ===="
        ps -ef | grep gpg-agent | grep -v grep || echo "No gpg-agent process found"

        # Debug GPG keys and trust
        echo "==== GPG Keys ===="
        gpg --list-keys
        gpg --list-secret-keys

        # Verify we can decrypt files directly
        echo "==== Testing direct GPG decryption ===="
        gpg --decrypt ~/.password-store/test/example.gpg || echo "Direct decryption failed"

        # Make sure we're still using the right GPG recipient
        fish -c "set -U pwstore_gpg_recipient 'CI Test'"

        # Check pwstore environment
        fish -c "echo \"Using pwstore_gpg_recipient: \$pwstore_gpg_recipient\""

        # Import from pass store with verbose flag for debugging
        fish -c "set -x CI true; pw import-pass ~/.password-store --verbose"

        # List all entries and show some imported passwords
        fish -c "set -x CI true; pw ls"
        fish -c "set -x CI true; pw show email/gmail"
        fish -c "set -x CI true; pw show web/social/twitter"

  syntax-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: fish-actions/install-fish@v1
      - uses: fish-actions/syntax-check@v1

  format-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: fish-actions/install-fish@v1
      - name: Check formatting manually
        run: |
          echo "Checking all Fish files for proper formatting..."
          find_result=0
          for file in $(find . -name "*.fish" -type f); do
            if ! fish_indent -c "$file"; then
              echo "::error file=$file::$file is not properly formatted"
              find_result=1
            fi
          done

          if [ $find_result -eq 1 ]; then
            echo "::error::Some files are not properly formatted. Run 'fish_indent -w' on them."
            exit 1
          else
            echo "All files are properly formatted!"
          fi
      - uses: fish-actions/format-check@v1

  auto-format:
    runs-on: ubuntu-latest
    needs: [format-check]
    # Only run this job if format-check fails
    if: ${{ github.event_name == 'pull_request' && failure() && needs.format-check.result == 'failure' }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: fish-actions/install-fish@v1
      - name: Format Fish files
        run: |
          echo "Formatting Fish files in the repository"
          find . -name "*.fish" -type f -exec fish_indent -w {} \;
      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "style: auto-format Fish files"
          commit_user_name: "GitHub Actions"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Actions <actions@github.com>"
